<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.imooc.mapper.TransferTokenMapper">
    <resultMap id="BaseResultMapAccount" type="com.imooc.pojo.TransToken">
        <result column="id"  property="id" jdbcType="BIGINT"/>
        <result column="transhash"  property="transHash" jdbcType="VARCHAR"/>
        <result column="logindex"  property="loginIndex" jdbcType="INTEGER"/>
        <result column="cointype"  property="coinType" jdbcType="INTEGER"/>
        <result column="fromaddr"  property="fromAddr" jdbcType="VARCHAR"/>
        <result column="toaddr"  property="toAddr" jdbcType="VARCHAR"/>
        <result column="amount"  property="amount" jdbcType="DECIMAL"/>
        <result column="contract"  property="contract" jdbcType="VARCHAR"/>
        <result column="blockhash"  property="blockHash" jdbcType="VARCHAR"/>
        <result column="blocknumber"  property="blockNumber" jdbcType="VARCHAR"/>
        <result column="tokenid"  property="tokenId" jdbcType="INTEGER"/>
        <result column="gaslimit"  property="gasLimit" jdbcType="BIGINT"/>
        <result column="nonce"  property="nonce" jdbcType="BIGINT"/>
        <result column="timestamp"  property="timeStamp" jdbcType="TIMESTAMP"/>
    </resultMap>

    <resultMap id="BaseResultMapToken" type="com.imooc.pojo.TransToken">
        <result column="id"  property="id" jdbcType="BIGINT"/>
        <result column="transhash"  property="transHash" jdbcType="VARCHAR"/>
        <result column="logindex"  property="loginIndex" jdbcType="INTEGER"/>
        <result column="cointype"  property="coinType" jdbcType="INTEGER"/>
        <result column="fromaddr"  property="fromAddr" jdbcType="VARCHAR"/>
        <result column="toaddr"  property="toAddr" jdbcType="VARCHAR"/>
        <result column="amount"  property="amount" jdbcType="DECIMAL"/>
        <result column="contract"  property="contract" jdbcType="VARCHAR"/>
        <result column="blockhash"  property="blockHash" jdbcType="VARCHAR"/>
        <result column="blocknumber"  property="blockNumber" jdbcType="VARCHAR"/>
        <result column="tokenid"  property="tokenId" jdbcType="INTEGER"/>
        <result column="gasUsed"  property="gasUsed" jdbcType="BIGINT"/>
        <result column="timestamp"  property="timeStamp" jdbcType="TIMESTAMP"/>
        <result column="gaslimit"  property="gasLimit" jdbcType="BIGINT"/>
        <result column="nonce"  property="nonce" jdbcType="BIGINT"/>
        <result column="timestamp"  property="timeStamp" jdbcType="TIMESTAMP"/>
    </resultMap>


    <select id="getTransferList" parameterType="java.lang.Long" resultMap="BaseResultMapAccount">
        select * from transtoken where cointype=#{coinType}
    </select>

<!--LEFT JOIN `transaction`  b ON a.transhash = b.hash-->
   <!-- <select id="getTransToken" parameterType="com.imooc.pojo.Form.BlockQueryForm" resultMap="BaseResultMapToken">
        select a.*,b.gasused,b.gasprice,b.timestamp from trans_token a LEFT JOIN `transaction`  b ON a.transhash = b.hash
        <where>
            <if test="blockQueryForm.address!=null and blockQueryForm.address!='' ">
                and a.contract=#{blockQueryForm.address}
            </if>
        </where>
        ORDER BY a.id DESC limit #{blockQueryForm.current}, #{blockQueryForm.size}
    </select>-->
    <select id="getTransToken" parameterType="com.imooc.pojo.Form.BlockQueryForm" resultMap="BaseResultMapToken">
        select a.* from trans_token a
        <where>
            <if test="blockQueryForm.address!=null and blockQueryForm.address!='' ">
                and a.contract=#{blockQueryForm.address}
            </if>
        </where>
        ORDER BY a.id DESC limit #{blockQueryForm.current}, #{blockQueryForm.size}
    </select>



    <insert id="insertOrUptate">
      insert into trans_token
        (
         transhash,logindex,cointype,fromaddr,toaddr,amount,contract,blockhash,blocknumber,tokenid,gasused,gasprice,gaslimit,nonce,timestamp
        ) values
     (
     #{transaction.transHash},#{transaction.loginIndex},#{transaction.coinType},#{transaction.fromAddr},#{transaction.toAddr}
     ,#{transaction.amount},#{transaction.contract},#{transaction.blockHash},#{transaction.blockNumber},#{transaction.tokenId},#{transaction.gasUsed},#{transaction.gasPrice},#{transaction.gasLimit},#{transaction.nonce},#{transaction.timeStamp}
      )
     ON DUPLICATE KEY UPDATE
       transhash=values(transHash)
     </insert>

    <select id="getTransactionByTxHash" resultMap="BaseResultMapAccount">
        select * from trans_token where transhash=#{txHash}
    </select>


    <select id="getContractCount" resultType="java.lang.Long">
      select count(*) from (SELECT DISTINCT fromaddr FROM trans_token WHERE contract =#{contractAddress}
      union (select distinct  toaddr from trans_token  WHERE contract =#{contractAddress}))c
    </select>
</mapper>